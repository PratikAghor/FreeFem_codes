mesh Th=square(8,8);
plot(Th,wait=1,ps="oldmesh.jpg");
Th=splitmesh(Th,1+5*((x-0.5)^2+(y-0.5)^2));
plot(Th,wait=1,ps="newmesh.jpg");
fespace Xh(Th,P2);
fespace Mh(Th,P1);
Xh u2,v2;
Xh u1,v1; 
Mh p,q;
Xh[int] xh(2);

xh[0] = x;
xh[1] = y;


cout << " nb of degree of freedom : " << Xh.ndof << endl;
cout << " nb of degree of freedom : " << Mh.ndof << endl;
real n=Xh.ndof;
Xh psi,phi;
/////////////To get streamlines, remove the comments from 
////////////the following block///////////////
solve streamlines(psi,phi) = 
  int2d(Th)( dx(psi)*dx(phi) + dy(psi)*dy(phi))
+  int2d(Th)( -phi*(dy(u1)-dx(u2)))
+  on(1,2,3,4,psi=0);

////////////////////////////////////////////////////////////////////////////////////////////

int i=0;
real  nu=1./100.;//nu is kinematic viscosity
real dt=0.1; 	//time step
real alpha=1/dt;
real t=0;
real u1min,u1max,u2min,u2max;
real U=1;
real rho=1000;	//rho=density of fluid
real omega=2*pi/6;//omega= frequency oof oscillations of upper lid
for(t=0;t<6;t=t+dt)

{
Xh up1,up2; 
///Weak Form for Navier-Stokes equations///
problem  NS ([u1,u2,p],[v1,v2,q],solver=GMRES,init=i) =
    int2d(Th)(
             alpha*( u1*v1 + u2*v2) 
            + nu * ( dx(u1)*dx(v1) + dy(u1)*dy(v1)
            +  dx(u2)*dx(v2) + dy(u2)*dy(v2) )
            + p*q*(0.000001) 
            -(1/rho)* p*dx(v1)-(1/rho)* p*dy(v2)
            + dx(u1)*q+ dy(u2)*q
           )
  + int2d(Th) ( -alpha*convect([up1,up2],-dt,up1)*v1 
		-alpha*convect([up1,up2],-dt,up2)*v2 )
  + on(3,u1=U*cos(omega*t),u2=0) 
		//include u=U*cos(omega*t) as a boundary condition
  + on(1,2,4,u1=0,u2=0)
;

for (i=0;i<=3;i++)
	{
  	up1=u1;
 	up2=u2;
 	NS;	
//solve N-S equations...update the values into convect operator 
//using 'method of characteristics' and iterate to get good results
	} ;
/* Saves velocity, pressure and streamfunction to file */
ofstream f1("-velou"+t+".txt");
ofstream f2("-velov"+t+".txt");
ofstream f3("-press"+t+".txt");
ofstream f4("-sfunc"+t+".txt");
ofstream f5("u1_u2"+t+".txt");
real[int] Gx(n),Gy(n);

for (int j = 0; j < Xh.ndof; j++) {
    cout << j;

		Gx[j]=xh[0][][j];
		Gy[j]= xh[1][][j];

if(Gx[j]==0.5)
{
	f1 <<"y="<<Gy[j]<<"u1(t)="<< u1[][j]<<endl; 
}
if(Gy[j]==0.5)
{
	f2 << "x="<<Gx[j]<<"u2(t)="<< u2[][j]<<endl; 
}

//	f3 <<"p=" <<p[]<<endl;
	f4 <<"x="<<Gx[j] <<"y="<<Gy[j]<<"psi="<< psi[][j]<<endl; 
//	f5 << "x="<<Gx[j]<<"y="<<Gy[j]<<"u1(t)="<< u1[][j]
//	<<"u2(t)="<< u2[][j]<<endl;


//	plot(coef=0.2,[u1,u2],fill=0,wait=1,ps="ufield(t)"+(t)+".jpg");
////Solve for streamlines if needed////
streamlines;
//plot(psi,wait=1,fill=0);

}
}
