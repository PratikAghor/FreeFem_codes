//border a(t=0,1){x=t;y=0;}
//border b(t=0,1){x=1;y=t;}
//border c1(t=1,0.96875){x=t;y=1;}
//border c2(t=0.96875,0.03125){x=t;y=1;}
//border c3(t=0.03125,0){x=t;y=1;}
//border d(t=1,0){x=0;y=t;}
//mesh Th=buildmesh(a(45)+b(40)+c1(27)+c2(27)+c3(27)+d(40));

mesh Th=square(20,20);
plot(Th,wait=1,ps="oldmesh.jpg");
Th=splitmesh(Th,1+5*((x-0.5)^2+(y-0.5)^2));
plot(Th,wait=1,ps="newmesh.jpg");
fespace Xh(Th,P2);
fespace Mh(Th,P1);
Xh u2,v2,up1,up2;
Xh u1,v1; 
Mh p,q;
Xh[int] xh(2);
macro div(u) ( dx(u#1)+dy(u#2) ) //
macro StrainRate(u) [2.*dx(u#1), 2.*dy(u#2), dy(u#1)+dx(u#2)] //
xh[0] = x;
xh[1] = y;
real n=Xh.ndof;
real eps=1e-5;
Xh psi,phi;
real H1norm=( sqrt(4*( dx(u1)^2 +.5* (dy(u1) + dx(u2))^2 + dy(u2)^2 )+ eps^2));
real eta,eta0,eta1;
real lambda=1,n1=0.5,a2=1;
eta0=0.004*(2.17^4);
eta1=0.004;
eta=eta1+((eta0-eta1)/(1+(H1norm*lambda)^a2)^((1-n1)/a2));

/////////////To get streamlines, remove the comments from 
////////////the following block///////////////
solve streamlines(psi,phi,solver=GMRES) = 
  int2d(Th)( dx(psi)*dx(phi) + dy(psi)*dy(phi))
+  int2d(Th)( -phi*(dy(u1)-dx(u2)))
+  on(1,2,3,4,psi=0)
//+on(a,b,c1,c2,c3,d,psi=0);
;
/////////////////////////////////////////////////////////
int i=0;
//real  nu=1./1000.;//nu is kinematic viscosity
real dt=0.1; 	//time step
real alpha=1/dt;
real t=0;
real U=0.0016;
real rho=1000;	//rho=density of fluid
//real omega=2*pi/6;//omega= frequency of oscillations of upper lid
real a1=1/32;
func f1=U*sin(pi*x/2*a1);
func f2=U;
func f3=U*sin(pi*(1-x)/2*a1);
problem  NSf ([u1,u2,p],[v1,v2,q]) =
    int2d(Th)(
             alpha*( u1*v1 + u2*v2)
//	+ 2*(eta/rho)*StrainRate(u)'*StrainRate(v)
	+(1/rho)*eta*(2*dx(u1)*dx(v1)+
	dy(u1)*dx(v2)+dx(u2)*dy(v1)+dx(u2)*dx(v2)+dy(u1)*dy(v1)+
	2*dy(u2)*dy(v2))
	-(1/rho)*p*div(v)
	- q*div(u)
	-(1e-5)*p*q
           )
//	+int1d(Th,c1,c2,c3)(v1*eta*(dy(u1)+dx(u2))+v2*(eta*2.*dy(u2)-p))
	+int1d(Th,3)(v1*eta*(dy(u1)+dx(u2))+v2*(eta*2.*dy(u2)-p))

	  +int2d(Th) 
		( -alpha*convect([up1,up2],-dt,up1)*v1 
	        -alpha*convect([up1,up2],-dt,up2)*v2 )
  //+ on(c1,u1=f1 ,u2=0) + on(c2,u1=f2 ,u2=0)+ on(c3,u1=f3,u2=0)
 		//include u=U*cos(omega*t) as a boundary condition
//  + on(a,b,d,u1=0,u2=0)
	+on(3,u1=1,u2=0)
	+ on(1,2,4,u1=0,u2=0)
;
///////////////////////////////////////////////////////////////////////////////

for(real t=0;t<6;t=t+dt)
{
for (i=0;i<=5;i++)
	{
	up1=u1;
 	up2=u2;
	NSf;
	
	}
	streamlines;
	ofstream ff1("u1(m)(t)"+(n1)+(t)+".txt");
	ofstream ff2("u2(m)(t)"+(n1)+(t)+".txt");
//ofstream ff3("-press"+t+".txt");
//ofstream ff4("-sfunc"+t+".txt");
real[int] Gx(n),Gy(n);

for (int j = 0; j < Xh.ndof; j++) {
    cout << j;		

		Gx[j]=xh[0][][j];
		Gy[j]= xh[1][][j];

	if(Gx[j]==0.5)
	{
	ff1 <<"y="<<Gy[j]<<" "<<"u1(t)="<< (u1[][j])/U<<endl; 
	}
	if(Gy[j]==0.5)
	{
	ff2 << "x="<<Gx[j]<<" "<<"u2(t)="<< (u2[][j])/U<<endl; 
	}
//	f3 <<"x="<<Gx[j] <<"y="<<Gy[j]<<"p=" <<p[][j]<<endl;
//	ff4 <<"x="<<Gx[j] <<"y="<<Gy[j]<<"psi="<< psi[][j]<<endl; 
					}
	plot(psi,fill=0,wait=1,ps="psi(t)(m)"+(t)+(n1)+".jpg");	
}
	/* Saves velocity, pressure and streamfunction to file */
	
//////////////////////////////////////////////////
