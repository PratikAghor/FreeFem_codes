//border a(t=0,1){x=t;y=0;}
//border b(t=0,1){x=1;y=t;}
//border c1(t=1,0.96875){x=t;y=1;}
//border c2(t=0.96875,0.03125){x=t;y=1;}
//border c3(t=0.03125,0){x=t;y=1;}
//border d(t=1,0){x=0;y=t;}
//mesh Th=buildmesh(a(50)+b(50)+c1(50)+c2(50)+c3(50)+d(50));

mesh Th=square(8,8);
plot(Th,wait=1,ps="oldmesh.jpg");
Th=splitmesh(Th,1+5*((x-0.5)^2+(y-0.5)^2));
plot(Th,wait=1,ps="newmesh.jpg");
fespace Mh(Th,P1);
Mh p,q;
fespace Xh(Th,P2);
Xh up1,up2,u1,u2,v1,v2;
macro div(u) ( dx(u#1)+dy(u#2) ) //
macro StrainRate(u) [2.*dx(u#1), 2.*dy(u#2), dy(u#1)+dx(u#2)] //
macro W [Wxx,Wyy,Wxy]//
macro Z [Zxx,Zyy,Zxy]//

Xh Wxx,Wyy,Wxy,Zxx,Zyy,Zxy;
real n=Xh.ndof;

Xh[int] xh(2);
xh[0] = x;
xh[1] = y;

real eps=1e-5;
real  nu=1./1000.;
real dt=0.1;	
real alpha=1/dt;
real t=0;
real U=1;
real rho=1000;
real omega=2*pi/6; 
real a1=1/32;

func f1=sin(pi*x/2*a1);
func f2=1;
func f3=sin(pi*(1-x)/2*a1);
int i=0,j=0,iter=0;
for(int k=0;k<4;k++)
{
real taus=10^(k);
for(iter=0;iter<5;iter++)
{
real H1norm=(2* sqrt(( dx(u1)^2 +.5* (dy(u1) + dx(u2))^2 + dy(u2)^2 )+eps^2 ));//
Xh psi,phi;
/////////////To get streamlines, remove the comments from 
////////////the following block///////////////
problem streamlines(psi,phi) = 
  int2d(Th)( dx(psi)*dx(phi) + dy(psi)*dy(phi))
+  int2d(Th)( -phi*(dy(u1)-dx(u2)))
//+  on(a,b,d,c1,c2,c3,psi=0);
+on(1,2,3,4,psi=0);

////////////////////////////////////////////////////////////////////////////////
problem NSf ([u1,u2,p,Wxx,Wyy,Wxy],[v1,v2,q,Zxx,Zyy,Zxy]) =
    int2d(Th)(
         alpha*( u1*v1 + u2*v2)
	+ 2*nu*StrainRate(u)'*StrainRate(v)
	+taus*(1/rho)*StrainRate(v)'*W
	-taus*(1/rho)*StrainRate(u)'*Z
       	-(1/rho)*p*div(v)
	- q*div(u)
	-(1e-5)*p*q
	+(H1norm)*W'*Z
           )
  + int2d(Th) ( -alpha*convect([up1,up2],-dt,up1)*v1 
		-alpha*convect([up1,up2],-dt,up2)*v2 )
 // + on(c1,u1=f1 ,u2=0) + on(c2,u1=f2 ,u2=0)+ on(c3,u1=f3,u2=0) 
		//include u=U*cos(omega*t) as a boundary condition
  //+ on(a,b,d,u1=0,u2=0)
	+on(3,u1=1,u2=0)+on(1,2,4,u1=0,u2=0)
;
//////////////////////////////////////////////////////////////////////////////////
problem  NSr ([u1,u2,p,Wxx,Wyy,Wxy],[v1,v2,q,Zxx,Zyy,Zxy]) =
    int2d(Th)(
         alpha*( u1*v1 + u2*v2)
//	+ 2*nu*StrainRate(u)'*StrainRate(v)
//	+taus*(1/rho)*(1/H1norm)*StrainRate(v)'*W
//	-taus*(1/rho)*(1/H1norm)*StrainRate(u)'*Z
       	-(1/rho)*p*div(v)
	- q*div(u)
	-(1e-5)*p*q
        +(H1norm)*W'*Z
	   )
//  + int2d(Th) ( -alpha*convect([up1,up2],-dt,up1)*v1 
//		-alpha*convect([up1,up2],-dt,up2)*v2 )
//  + on(c1,u1=f1 ,u2=0) + on(c2,u1=f2 ,u2=0)+ on(c3,u1=f3,u2=0) 
		//include u=U*cos(omega*t) as a boundary condition
 // + on(a,b,d,u1=0,u2=0)
	+on(3,u1=1,u2=0)+on(1,2,4,u1=0,u2=0)

;


for (i=0;i<=3;i++)
	{
  	up1=u1;
 	up2=u2;
 	 
	NSf;
	streamlines;
	}

//solve N-S equations...update the values into convect operator 
//using 'method of characteristics' and iterate to get good results
////Solve for streamlines if needed////
plot(psi,fill=0,wait=1,ps="psi(taus)"+((taus))+".jpg");
ofstream ff1("velou.txt");
ofstream ff2("velov.txt");
ofstream ff3("u1x.txt");
ofstream ff4("u1y.txt");
ofstream ff5("u2x.txt");
ofstream ff6("u2y.txt");
real[int] Gx(n),Gy(n),u1x(n),u1y(n),u2x(n),u2y(n);

for (int j = 0; j < Xh.ndof; j++) {
    cout << j;		

		Gx[j]=xh[0][][j];
		Gy[j]= xh[1][][j];
		ff1 <<"x="<<Gx[j]<<"y="<<Gy[j]<<"u1="<< u1[][j]<<endl;
		ff2<<"x="<<Gx[j]<<"y="<<Gy[j]<<"u2="<<u2[][j]<<endl;
		ff3<<"x="<<Gx[j]<<"y="<<Gy[j]<<"u1x="<<endl;
		ff4<<"x="<<Gx[j]<<"y="<<Gy[j]<<"u1y="<<dy(u1)<<endl;		
				}



}


}

